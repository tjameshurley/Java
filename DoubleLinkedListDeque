/**
 * Timothy Hurley
 * Chpt 21 PC1
   The DoubleLinkedListDeque class is a Doubly Linked list.
*/
public class HurleyT_DoubleLinkedListDeque
{
/**
   The Node class stores a list element
   and a reference to the next node.
*/
private class Node
{
  String value;
  Node next;
  Node prev;

/**
   Constructor.
   @param val The element to store in the node.
   @param n The reference to the successor node.
*/
Node(String val, Node n, Node p)
  {
   value = val;
   next = n;
   prev = p;
  }

/**
   Constructor.
   @param val The element to store in the node.
*/
Node(String val)
  {
   // Call the other (sister) constructor.
   this(val, null, null);
  }
}

private Node first; // list head
private Node last; // last element in list

/**
   Constructor.
*/

public HurleyT_DoubleLinkedListDeque()
{
first = null;
last = null;
}

/**
   The isEmpty method checks to see
   if the list is empty.
   @return true if list is empty,
   false otherwise.
*/
public boolean isEmpty()
{
return first == null;
}

/**
   The size method returns the length of the list.
   @return The number of elements in the list.
*/
public int size()
{
   int count = 0;
   Node p = first;
   while (p != null)
   {
   // There is an element at p
   count ++;
   p = p.next;
   }
   return count;
}

/**
   The add method adds an element to
   the end of the list.
   @param e The value to add to the
   end of the list.
*/
public void add(String e)
{
if (isEmpty())
{
first = new Node(e);
last = first;
}
else
{
// Add to end of existing list
last.next = new Node(e);
last = last.next;
}
}

/**
   The addLast method adds an element to
   the end of the list.
   @param e The value to add to the
   end of the list.
*/
public void addLast(String e)
{
if (isEmpty())
{
first = new Node(e);
last = first;
}
else
{
// Add to end of existing list
last.next = new Node(e);
last = last.next;
}
}

/**
   The addFirst method adds an element to
   the front of the list.
   @param e The value to add to the
   end of the list.
*/
public void addFirst(String e)
{
if (isEmpty())
{
first = new Node(e);
last = first;
}
else
{
   // Add to front of existing list
   Node p = first;  //Old first
   first = new Node(e, p, null);
   if (p != null)
     p.prev = first;
   if (last == null)
     last = first;
   return;
}
}

/**
   The add method adds an element at a position.
   @param e The element to add to the list.
   @param index The position at which to add
   the element.
   @exception IndexOutOfBoundsException When
   index is out of bounds.
*/
public void add(int index, String e)
{
   if (index < 0 || index > size())
   {
   String message = String.valueOf(index);
   throw new IndexOutOfBoundsException(message);
   }

   // Index is at least 0
   if (index == 0)
   {
   // New element goes at beginning
   Node p = first;  //Old first
   first = new Node(e, p, null);
   if (p != null)
     p.prev = first;
   if (last == null)
     last = first;
   return;
   }

   // Set a reference pred to point to the node that
   // will be the predecessor of the new node
   Node pred = first;
   for (int k = 1; k <= index - 1; k++)
   {
    pred = pred.next;
   }

   // Splice in a node containing the new element

   Node succ = pred.next;
   Node middle = new Node(e, succ, pred);
   pred.next = middle;
   if (succ == null)
     last = middle;
   else
     succ.prev = middle;
}

/**
   The toString method computes the string
   representation of the list.
   @return The string from of the list.
*/
public String toString()
{

StringBuilder strBuilder = new StringBuilder();

// Use p to walk down the linked list

Node p = first;
  while (p != null)
    {
    strBuilder.append(p.value + "\n");
     p = p.next;
    }
return strBuilder.toString();
}

/**
   The remove method removes the element at an index.
   @param index The index of the element to remove.
   @return The element removed.
   @exception IndexOutOfBoundsException When index is out of bounds.
*/
public String remove(int index)
{
   if (index < 0 || index >= size())
   {
   String message = String.valueOf(index);
   throw new IndexOutOfBoundsException(message);
   }

   Node target = first;
   for (int k = 1; k <= index; k++)
     target = target.next;

   String element = target.value;
   Node pred = target.prev;
   Node succ = target.next;

   //Route forward and back pointers around
   //the node to be removed
   if (pred == null)
     first = succ;
   else
     pred.next = succ;

   if ( succ == null)
     last = pred;
   else
     succ.prev = pred;

   return element;
}

/**
 * The remove method removes an element from the list.
 * @param element The element to remove.
 * @return true if the element was removed, false otherwise.
 * */
public boolean remove(String element)
{
  if (isEmpty())
    return false;

  Node target = first;
  while (target != null && !element.equals(target.value))
    target = target.next;

  if (target == null)
    return false;

  Node pred = target.prev;
  Node succ = target.next;

  if (pred == null)
    first = succ;
  else
    pred.next = succ;

  if (succ == null)
    last = pred;
  else
    succ.prev = pred;

  return true;
}

/**
 * The removeFirst method removes an element from the list.
 * @param element The element to remove.
 * @return String the element removed.
 * */
public String removeFirst()
{
  if (isEmpty())
    return null;

  Node target = first;
  while (target != null)
    target = target.next;

  if (target == null)
    return null;

  Node pred = target.prev;
  Node succ = target.next;

  if (pred == null)
    first = succ;
  else
    pred.next = succ;

  if (succ == null)
    last = pred;
  else
    succ.prev = pred;

  return target.value;
}

/**
 * The removeLast method removes an element from the list.
 * @param element The element to remove.
 * @return String the element removed.
 * */
public String removeLast()
{
  if (isEmpty())
    return null;

  Node target = first;
  while (target != null)
    target = target.next;

  if (target == null)
    return null;

  Node pred = target.prev;
  Node succ = target.next;

  if (pred == null)
    first = succ;
  else
    pred.next = succ;

  if (succ == null)
    last = pred;
  else
    succ.prev = pred;

  return target.value;
}

/**
 * The getFirst method returns the first element from the list.
 * @return String the element at the front of the list.
 * */
public String getFirst()
{
  if (isEmpty())
    return null;

  Node target = first;
  while (target != null)
    target = target.next;

  return target.value;
}

/**
 * The getLast method returns the last element from the list.
 * @return String the element at the end of the list.
 * */
public String getLast()
{
  if (isEmpty())
    return null;
   int count = 0;
   Node p = first;
   while (p != null)
   {
   // There is an element at p
   count ++;
   p = p.next;
   }
   return p.value;
}

/**
 * The get method returns an element from the list at the given index.
 * @return String the element returned from the list.
 * */
public String get(int index)
{
if (index < 0 || index >= size())
   {
   String message = String.valueOf(index);
   throw new IndexOutOfBoundsException(message);
   }

   Node target = first;
   for (int k = 1; k <= index; k++)
     target = target.next;

   String element = target.value;
   Node pred = target.prev;
   Node succ = target.next;
   return element;
}



/**
 * The main method demonstrates the methods on a sample linked list.
 * */
public static void main(String [] args)
{
HurleyT_DoubleLinkedListDeque ll = new HurleyT_DoubleLinkedListDeque();

ll.add("Amy");
ll.add("Bob");
ll.add(0, "Al");
ll.add(2, "Beth");
ll.add(4, "Carol");

System.out.println("The members of the list are:");
System.out.print(ll);
System.out.println(ll.get(2));

}
}
